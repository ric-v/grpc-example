// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: proto/bi_directional_streaming.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BiDirectionalStreamServiceClient is the client API for BiDirectionalStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BiDirectionalStreamServiceClient interface {
	BiDirectionalStream(ctx context.Context, opts ...grpc.CallOption) (BiDirectionalStreamService_BiDirectionalStreamClient, error)
}

type biDirectionalStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBiDirectionalStreamServiceClient(cc grpc.ClientConnInterface) BiDirectionalStreamServiceClient {
	return &biDirectionalStreamServiceClient{cc}
}

func (c *biDirectionalStreamServiceClient) BiDirectionalStream(ctx context.Context, opts ...grpc.CallOption) (BiDirectionalStreamService_BiDirectionalStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &BiDirectionalStreamService_ServiceDesc.Streams[0], "/pb.BiDirectionalStreamService/BiDirectionalStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &biDirectionalStreamServiceBiDirectionalStreamClient{stream}
	return x, nil
}

type BiDirectionalStreamService_BiDirectionalStreamClient interface {
	Send(*BiDirectionalStreamRequest) error
	Recv() (*BiDirectionalStreamResponse, error)
	grpc.ClientStream
}

type biDirectionalStreamServiceBiDirectionalStreamClient struct {
	grpc.ClientStream
}

func (x *biDirectionalStreamServiceBiDirectionalStreamClient) Send(m *BiDirectionalStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *biDirectionalStreamServiceBiDirectionalStreamClient) Recv() (*BiDirectionalStreamResponse, error) {
	m := new(BiDirectionalStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BiDirectionalStreamServiceServer is the server API for BiDirectionalStreamService service.
// All implementations should embed UnimplementedBiDirectionalStreamServiceServer
// for forward compatibility
type BiDirectionalStreamServiceServer interface {
	BiDirectionalStream(BiDirectionalStreamService_BiDirectionalStreamServer) error
}

// UnimplementedBiDirectionalStreamServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBiDirectionalStreamServiceServer struct {
}

func (UnimplementedBiDirectionalStreamServiceServer) BiDirectionalStream(BiDirectionalStreamService_BiDirectionalStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BiDirectionalStream not implemented")
}

// UnsafeBiDirectionalStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BiDirectionalStreamServiceServer will
// result in compilation errors.
type UnsafeBiDirectionalStreamServiceServer interface {
	mustEmbedUnimplementedBiDirectionalStreamServiceServer()
}

func RegisterBiDirectionalStreamServiceServer(s grpc.ServiceRegistrar, srv BiDirectionalStreamServiceServer) {
	s.RegisterService(&BiDirectionalStreamService_ServiceDesc, srv)
}

func _BiDirectionalStreamService_BiDirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BiDirectionalStreamServiceServer).BiDirectionalStream(&biDirectionalStreamServiceBiDirectionalStreamServer{stream})
}

type BiDirectionalStreamService_BiDirectionalStreamServer interface {
	Send(*BiDirectionalStreamResponse) error
	Recv() (*BiDirectionalStreamRequest, error)
	grpc.ServerStream
}

type biDirectionalStreamServiceBiDirectionalStreamServer struct {
	grpc.ServerStream
}

func (x *biDirectionalStreamServiceBiDirectionalStreamServer) Send(m *BiDirectionalStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *biDirectionalStreamServiceBiDirectionalStreamServer) Recv() (*BiDirectionalStreamRequest, error) {
	m := new(BiDirectionalStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BiDirectionalStreamService_ServiceDesc is the grpc.ServiceDesc for BiDirectionalStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BiDirectionalStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BiDirectionalStreamService",
	HandlerType: (*BiDirectionalStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BiDirectionalStream",
			Handler:       _BiDirectionalStreamService_BiDirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/bi_directional_streaming.proto",
}
