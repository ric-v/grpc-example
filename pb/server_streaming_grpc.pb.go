// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: proto/server_streaming.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerStreamClient is the client API for ServerStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerStreamClient interface {
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...grpc.CallOption) (ServerStream_ServerStreamClient, error)
}

type serverStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewServerStreamClient(cc grpc.ClientConnInterface) ServerStreamClient {
	return &serverStreamClient{cc}
}

func (c *serverStreamClient) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...grpc.CallOption) (ServerStream_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServerStream_ServiceDesc.Streams[0], "/pb.ServerStream/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverStreamServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServerStream_ServerStreamClient interface {
	Recv() (*ServerStreamRequest, error)
	grpc.ClientStream
}

type serverStreamServerStreamClient struct {
	grpc.ClientStream
}

func (x *serverStreamServerStreamClient) Recv() (*ServerStreamRequest, error) {
	m := new(ServerStreamRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerStreamServer is the server API for ServerStream service.
// All implementations should embed UnimplementedServerStreamServer
// for forward compatibility
type ServerStreamServer interface {
	ServerStream(*ServerStreamRequest, ServerStream_ServerStreamServer) error
}

// UnimplementedServerStreamServer should be embedded to have forward compatible implementations.
type UnimplementedServerStreamServer struct {
}

func (UnimplementedServerStreamServer) ServerStream(*ServerStreamRequest, ServerStream_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}

// UnsafeServerStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerStreamServer will
// result in compilation errors.
type UnsafeServerStreamServer interface {
	mustEmbedUnimplementedServerStreamServer()
}

func RegisterServerStreamServer(s grpc.ServiceRegistrar, srv ServerStreamServer) {
	s.RegisterService(&ServerStream_ServiceDesc, srv)
}

func _ServerStream_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerStreamServer).ServerStream(m, &serverStreamServerStreamServer{stream})
}

type ServerStream_ServerStreamServer interface {
	Send(*ServerStreamRequest) error
	grpc.ServerStream
}

type serverStreamServerStreamServer struct {
	grpc.ServerStream
}

func (x *serverStreamServerStreamServer) Send(m *ServerStreamRequest) error {
	return x.ServerStream.SendMsg(m)
}

// ServerStream_ServiceDesc is the grpc.ServiceDesc for ServerStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ServerStream",
	HandlerType: (*ServerStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _ServerStream_ServerStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/server_streaming.proto",
}
